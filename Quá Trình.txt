1. nodeJS

2. Npm init 
    + npm init được sử dụng để khởi tạo một dự án Node.js mới 
    và tạo một tệp package.json 
    chứa thông tin và quản lý các phụ thuộc của dự án.

3. express
    + Express là một framework phát triển ứng dụng web cho Node.js.
    + Xây dựng ứng dụng web: Express cung cấp các phương thức như 
    get, post, put, delete để xử lý các yêu cầu HTTP đến từ trình duyệt web. 
    Bạn có thể tạo các định tuyến (routes) để định nghĩa các hành động cụ thể cho mỗi yêu cầu.
    + Xử lý middleware: Express cho phép bạn xây dựng middleware 
    để thực hiện các chức năng trung gian trước khi yêu cầu đến
    đích cuối cùng. 
    Ví dụ, bạn có thể sử dụng middleware để xác thực yêu cầu,
    ghi log, xử lý lỗi, hoặc thực hiện các chức năng phổ biến khác.
    + Quản lý tài nguyên tĩnh:
    Express cho phép bạn phục vụ các tệp tĩnh như hình ảnh,
    tệp CSS và JavaScript cho trình duyệt. 
    Điều này rất hữu ích khi bạn muốn cung cấp
    các tài nguyên tĩnh cho ứng dụng web của mình
    + CRUD 

4. ejs : template engines
    + Tài liệu : https://drive.google.com/file/d/19Tz3obQxsJ9yVk_NS1h_JNIxWZDWv1Sd/view
    + docs liên quan template engines : https://expressjs.com/en/guide/using-template-engines.html
    + 18 Teamplate engine

5. env 
    + không đẩy lên github
    + cài đặt dotenv npm và import require('dotenv').config(); file js mới get được value 
    - env.Example : để chia sẻ cho ae code khác, nhưng chỉ để lại key: value bỏ
6. DevTool - Nodemon
    - Nodemon
        + không cần re-start dự án tự cập nhật UI : js, mjs, coffee , litcoffee
    - Sự khác nhau của Dependencies và devDependencies
#21. Static files | Backend RESTFul Server Node.JS (SQL/MongoDB) Cho Beginners
    - Thêm ảnh hoặc css hoặc javascript
        + thêm thư mục public ( css , img . js )
        + lưu ý file js này xử lý chỗ view html , animation , thao tác với dom. 
        nó không phải logic cho ứng dụng app của chúng ta , 1 cái js phía sever và 
        1 cái ở client
    - ở thư mục public , client có thể truy cập được, còn viết mã nguồn phải viết chỗ khác
    không client truy cập có mà toang web
    - thêm https://expressjs.com/en/starter/static-files.html
        + hỗ trợ client truy cập public
        + ví dụ :   http://localhost:3000/css/style.css
  
#22. Mô hình MVC với Node.JS | Backend RESTFul Server Node.JS (SQL/MongoDB)
    1.css
        - cái gì mà sever để cho client xem ấy . thì nó sẽ cho vô public , css nè 

#23. Tổ Chức Các Thư Mục Project | Backend RESTFul Server Node.JS (SQL/MongoDB) 
    1. migration : ghi cấu hình database của mày
    2. seeder : tạo data fake cho ứng dụng của chúng ta
    3. helper : các function để tái sử dụng 

#24. Áp dụng mô hình MVC với Node.js (Part 1) | Node.JS (SQL/MongoDB) Cho Beginners 10/10
    + chia tachs view Engine ra file

#25. Áp dụng mô hình MVC với Node.js (Part 2) | Node.JS (SQL/MongoDB) Cho Beginners
    + chia tach router , app.user(router)
    + trong router , goi function controller 

#26. Why Docker - Tại Sao Dùng Docker | Khóa Học Node.JS (SQL/MongoDB) Cho Beginners     
    - docker giúp code chạy trên mọi môi trường
        + build, ship then Run , khong quan tấm đến môi trường

#27. Sử dụng Docker | Khóa Học Node.JS (SQL/MongoDB) Cho Beginners

#28 không có , bỏ qua

#29. Relational Database - Chạy MySQL với Docker | Khóa Học Node.JS (SQL/MongoDB) Cho Beginners
    - 1. DBeaver 
        + thay thế cho MySQL workpench ( vì nó chạy dc sql thôi)   
        + DBeaver thì chạy dc my sql , posgres,oracle